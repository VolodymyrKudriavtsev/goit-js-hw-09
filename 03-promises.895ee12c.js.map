{"mappings":"AAAA,SAASA,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAMb,SAASQ,GAAUT,SAAEA,EAAQC,MAAEA,IAC7BS,QAAQC,IAAI,uBAAqBX,QAAiBC,SAAcW,KAAGC,M,CAGrE,SAASC,GAAQd,SAAEA,EAAQC,MAAEA,IAC3BS,QAAQC,IAAI,sBAAoBX,QAAiBC,SAAcW,KAAGC,M,EAsCpE,SAAgCE,EAAMC,GACpCN,QAAQC,IAAIC,KAAKC,OACjBd,EAAc,EAAG,KAAMkB,KAAKR,GAAWS,MAAMJ,GAC7C,IAAIK,EAAU,EAEdC,WAAaC,aAAY,KACvBF,GAAW,EAEXpB,EAAc,EAAG,KAAMkB,KAAKR,GAAWS,MAAMJ,GACzCK,IAAYH,GACdM,cAAcF,W,GAGfL,E,CAGLQ,CAAuB,IAAM","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// createPromise(2, 1500).then(onSuccess).catch(onError);\n\nfunction onSuccess({ position, delay }) {\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms - ` + Date.now());\n}\n\nfunction onError({ position, delay }) {\n  console.log(`❌ Rejected promise ${position} in ${delay}ms - ` + Date.now());\n}\n\n// let POSITION = 0;\n\n// function experiment(DELAY, STEP, AMOUNT) {\n//   console.log(Date.now());\n//   // STEP = 0;\n//   setTimeout(() => {\n//     // STEP = STEP;\n//     intervalId = setInterval(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       COUNTER += 1;\n//       POSITION += 1;\n//       // DELAY += STEP;\n\n//       if (shouldResolve) {\n//         console.log(\n//           `✅ Fulfilled promise ${POSITION} in ${(DELAY += STEP)}ms - ` +\n//             Date.now()\n//         );\n//       } else {\n//         console.log(\n//           `❌ Rejected promise ${POSITION} in ${(DELAY += STEP)}ms - ` +\n//             Date.now()\n//         );\n//       }\n\n//       if (COUNTER === AMOUNT) {\n//         clearInterval(intervalId);\n//         return;\n//       }\n//     }, STEP);\n//   }, DELAY);\n// }\n\n// experiment(2000, 1000, 5)\n\nfunction experiment_1_ON_SUBMIT(STEP, AMOUNT) {\n  console.log(Date.now());\n  createPromise(2, 2000).then(onSuccess).catch(onError);\n  let COUNTER = 1;\n\n  intervalId = setInterval(() => {\n    COUNTER += 1;\n\n    createPromise(2, 2000).then(onSuccess).catch(onError);\n    if (COUNTER === AMOUNT) {\n      clearInterval(intervalId);\n      return;\n    }\n  }, STEP);\n}\n\nexperiment_1_ON_SUBMIT(1000, 3);\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$onSuccess","console","log","Date","now","$47d4ff9957288465$var$onError","STEP","AMOUNT","then","catch","COUNTER","intervalId","setInterval","clearInterval","$47d4ff9957288465$var$experiment_1_ON_SUBMIT"],"version":3,"file":"03-promises.895ee12c.js.map"}